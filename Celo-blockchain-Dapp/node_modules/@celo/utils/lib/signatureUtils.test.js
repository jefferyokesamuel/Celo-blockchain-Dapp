"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Web3Utils = __importStar(require("web3-utils"));
var address_1 = require("./address");
var signatureUtils_1 = require("./signatureUtils");
var typed_data_constructors_1 = require("./typed-data-constructors");
describe('signatures', function () {
    it('should sign appropriately with a hash of a message', function () {
        var pKey = '0x62633f7c9583780a7d3904a2f55d792707c345f21de1bacb2d389934d82796b2';
        var address = (0, address_1.privateKeyToAddress)(pKey);
        var messageHash = Web3Utils.soliditySha3({ type: 'string', value: 'identifier' });
        var signature = (0, signatureUtils_1.signMessageWithoutPrefix)(messageHash, pKey, address);
        var serializedSig = (0, signatureUtils_1.serializeSignature)(signature);
        (0, signatureUtils_1.parseSignatureWithoutPrefix)(messageHash, serializedSig, address);
    });
    it('should sign appropriately with just the message', function () {
        var pKey = '0x62633f7c9583780a7d3904a2f55d792707c345f21de1bacb2d389934d82796b2';
        var address = (0, address_1.privateKeyToAddress)(pKey);
        var message = 'mymessage';
        var signature = (0, signatureUtils_1.signMessage)(message, pKey, address);
        var serializedSig = (0, signatureUtils_1.serializeSignature)(signature);
        (0, signatureUtils_1.parseSignature)(message, serializedSig, address);
    });
    describe('EIP712 signatures', function () {
        var pKey = '0xac8ca7aeb0f57f1ed1ce98a695dabcb0278faf03d68e1bae08c9095355a28b06';
        var signer = (0, address_1.privateKeyToAddress)(pKey);
        var typedData = (0, typed_data_constructors_1.attestationSecurityCode)('1000023');
        // generated via LocalWallet's signTypedData
        var rsvSignature = '0x106c6f892c5667c298dddc023161b58657c47fb03348fa0ec9b3b515841df47b39985d448104683fcef8d81f2cdcf8bce83c97f8dfb130438f7d26c6e3b2a10001';
        // generated via contractKit's signTypedData
        var vrsSignature = '0x1c106c6f892c5667c298dddc023161b58657c47fb03348fa0ec9b3b515841df47b39985d448104683fcef8d81f2cdcf8bce83c97f8dfb130438f7d26c6e3b2a100';
        var signature = {
            v: 28,
            r: '0x106c6f892c5667c298dddc023161b58657c47fb03348fa0ec9b3b515841df47b',
            s: '0x39985d448104683fcef8d81f2cdcf8bce83c97f8dfb130438f7d26c6e3b2a100',
        };
        // Modified 'v' from 1c -> 1b (28 -> 27)
        var invalidVrsSignature = '0x1b106c6f892c5667c298dddc023161b58657c47fb03348fa0ec9b3b515841df47b39985d448104683fcef8d81f2cdcf8bce83c97f8dfb130438f7d26c6e3b2a100';
        it('should recover signer from RSV-serialized sig of EIP712 typed data ', function () {
            var recoveredSigner = signatureUtils_1.SignatureUtils.recoverEIP712TypedDataSignerRsv(typedData, rsvSignature);
            expect(signer.toLowerCase()).toEqual(recoveredSigner.toLowerCase());
        });
        it('should recover signer from VSR-serialized sig of EIP712 typed data', function () {
            var recoveredSigner = signatureUtils_1.SignatureUtils.recoverEIP712TypedDataSignerVrs(typedData, vrsSignature);
            expect(signer.toLowerCase()).toEqual(recoveredSigner.toLowerCase());
        });
        it('should verify signer from RSV-serialized sig of EIP712 typed data', function () {
            expect(signatureUtils_1.SignatureUtils.verifyEIP712TypedDataSigner(typedData, rsvSignature, signer)).toBeTruthy();
        });
        it('should verify signer from VSR-serialized sig of EIP712 typed data', function () {
            expect(signatureUtils_1.SignatureUtils.verifyEIP712TypedDataSigner(typedData, vrsSignature, signer)).toBeTruthy();
        });
        it('should verify signer from serializeSignature output', function () {
            var serializedSig = signatureUtils_1.SignatureUtils.serializeSignature(signature);
            expect(signatureUtils_1.SignatureUtils.verifyEIP712TypedDataSigner(typedData, serializedSig, signer)).toBeTruthy();
        });
        it('should not verify signer from invalid sig of EIP712 typed data', function () {
            expect(signatureUtils_1.SignatureUtils.verifyEIP712TypedDataSigner(typedData, invalidVrsSignature, signer)).toBeFalsy();
        });
    });
});
//# sourceMappingURL=signatureUtils.test.js.map