"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var account_1 = require("@celo/base/lib/account");
var bip39 = __importStar(require("bip39"));
var account_2 = require("./account");
describe('AccountUtils', function () {
    describe('.generateMnemonic()', function () {
        var e_1, _a;
        it('should generate 24 word mnemonic', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mnemonic;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, account_2.generateMnemonic)()];
                    case 1:
                        mnemonic = _a.sent();
                        expect(mnemonic.split(/\s+/g).length).toEqual(24);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should generate 12 word mnemonic', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mnemonic;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, account_2.generateMnemonic)(account_2.MnemonicStrength.s128_12words)];
                    case 1:
                        mnemonic = _a.sent();
                        expect(mnemonic.split(/\s+/g).length).toEqual(12);
                        return [2 /*return*/];
                }
            });
        }); });
        var _loop_1 = function (language) {
            var languageName = account_1.MnemonicLanguages[language];
            it("should generate a valid mnemonic in " + languageName + "}", function () { return __awaiter(void 0, void 0, void 0, function () {
                var mnemonic;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, account_2.generateMnemonic)(undefined, language)];
                        case 1:
                            mnemonic = _a.sent();
                            expect(mnemonic.split(/\s+/g).length).toEqual(24);
                            // This validates against all languages
                            expect((0, account_2.validateMnemonic)(mnemonic)).toBeTruthy();
                            // This validates using a specific wordlist
                            expect(bip39.validateMnemonic(mnemonic, bip39.wordlists[languageName])).toBeTruthy();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        try {
            for (var _b = __values((0, account_2.getAllLanguages)()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                _loop_1(language);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
    describe('.validateMnemonic()', function () {
        var _a, e_2, _b;
        var testMnemonics = (_a = {},
            _a[account_1.MnemonicLanguages.chinese_simplified] = '唐 即 驶 橡 钙 六 码 卸 擦 批 培 拒 磨 励 累 栏 砍 霞 弃 卫 中 空 罩 尘',
            _a[account_1.MnemonicLanguages.chinese_traditional] = '微 款 輩 除 雕 將 鑽 蕭 奇 波 掃 齒 弱 誣 氫 兩 證 漸 堡 亦 攝 了 坯 材',
            _a[account_1.MnemonicLanguages.english] = 'grid dove lift rib rose grit comfort delay moon crumble sell adapt rule food pull loan puppy okay palace predict grass hint repair napkin',
            _a[account_1.MnemonicLanguages.french] = 'texte succès lexique frégate sévir oiseau lanceur souvenir mythique onirique pélican opérer foulure enfouir maintien vexer relief aérer citerne ligoter arbitre gomme sénateur dénouer',
            _a[account_1.MnemonicLanguages.italian] = 'leone sinistro nicchia mole tromba celebre parcella pillola golf voga ostacolo relazione peso unificato tristezza brezza merenda trasloco pinolo persuaso querela pomice onere premere',
            _a[account_1.MnemonicLanguages.japanese] = 'へきが　けねん　したうけ　せんさい　けいさつ　めんきょ　せりふ　ひびく　せあぶら　たいむ　そこう　うさぎ　つながる　はんろん　むいか　せはば　すべる　りりく　はいれつ　たいる　りかい　さたん　はっかく　ひしょ',
            _a[account_1.MnemonicLanguages.korean] = '보장 검사 장기간 문득 먼저 현지 쇼핑 재정 예금 녹화 연세 도덕 정말 불빛 사생활 재능 활동 불빛 경험 소형 고등학생 철저히 공원 증세',
            _a[account_1.MnemonicLanguages.spanish] = 'cordón soplar santo teoría arpa ducha secreto margen brisa anciano maldad colgar atún catre votar órgano bebida ecuador rabia maduro tubo faja avaro vivero',
            _a[account_1.MnemonicLanguages.portuguese] = 'cheiro lealdade duplo oposto vereador acessar lanche regra prefeito apego ratazana piedade alarme marmita subsolo brochura honrado viajar magnata canoa sarjeta terno cimento prezar',
            _a);
        var _loop_2 = function (language) {
            var languageName = account_1.MnemonicLanguages[language];
            it("should validate a mnemonic in " + languageName, function () {
                var mnemonic = testMnemonics[language];
                expect(mnemonic).toBeDefined();
                // This validates against all languages
                expect((0, account_2.validateMnemonic)(mnemonic)).toBeTruthy();
                // This validates using a specific wordlist
                expect(bip39.validateMnemonic(mnemonic, bip39.wordlists[languageName])).toBeTruthy();
            });
        };
        try {
            for (var _c = __values((0, account_2.getAllLanguages)()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var language = _d.value;
                _loop_2(language);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
    });
    describe('.generateKeys()', function () {
        it('should generate an expected private key for a mnemonic', function () { return __awaiter(void 0, void 0, void 0, function () {
            var mnemonics, expectedPrivateKeys, i, derivation0, derivation1, password;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mnemonics = [
                            'language quiz proud sample canoe trend topic upper coil rack choice engage noodle panda mutual grab shallow thrive forget trophy pull pool mask height',
                            'law canoe elegant tuna core tired flag scissors shy expand drum often output result exotic busy smooth dumb world obtain nominee easily conduct increase',
                            'second inside foot legend direct bridge human diesel exotic regular silent trigger multiply prosper involve bulb swarm oppose police forest tooth ankle hungry diesel',
                        ];
                        expectedPrivateKeys = [
                            {
                                derivation0: {
                                    address: '0xe13E391f19193DB38AeA975a30193E50fBff381f',
                                    privateKey: '9b20170cd294190efb2eb1d406a51e6705461cb540e777784565c1d8342016d7',
                                    publicKey: '0257780786b4ba7bf47b3be6082f65069f552012735a17c2080648de67cfb440c1',
                                },
                                derivation1: {
                                    address: '0x9a85EBC698647895a1e12544E9B1751Aed57f9F4',
                                    privateKey: '29c025cda952cb59d8504cca390bcdbc2cc3706ca5bfb65a5b6f5dd5dc5176dd',
                                    publicKey: '029c90f394bea3d46c46896b0bd1b36119b031a6da498b49a32aad77f10ce1f672',
                                },
                                password: {
                                    address: '0x1546D345F7A5Cf533290fd54833de1Ce0552A2d7',
                                    privateKey: '92956ef74d530224029380385ca556240be042b7e5592ffece5945286f1562c3',
                                    publicKey: '0331003f16d42ea996da1bc91188ff170ea451570a9bed4779682dd27da1892303',
                                },
                            },
                            {
                                derivation0: {
                                    address: '0xCA388713E3741d9Bf938D6370a94F80766A22530',
                                    privateKey: 'eb0fea0b0aab13e4115939e2af62a5f136cdeefa1f0480c5550b93550339857d',
                                    publicKey: '0279548f9e2b8fbbeb91865068257de240fa307d479c94926a32e33f8707c70497',
                                },
                                derivation1: {
                                    address: '0x5bA0350E8a681b0fe3D939633B5514A9A6152f81',
                                    privateKey: 'cd2aa97d2bf6ddac4f00513eb08de8d40dcff4106508d18ea995ffbff8166420',
                                    publicKey: '03e4784248f6c4b3bacf8090f67d002e58f4da448bb9b993432fe226abdcd5c83f',
                                },
                                password: {
                                    address: '0x9A78acd4C77c796C3d657f17F3D05cd46eFCC5bE',
                                    privateKey: '62c928058f72e5a04abcf5e46035d5f0933f996285ec25b3bc9d2b9fc907dc56',
                                    publicKey: '0240d5adc5c0ce46f3488401e3ea78a261de1cd8a8e6a1d9e55386c6c4881b70ec',
                                },
                            },
                            {
                                derivation0: {
                                    address: '0x64265716715822ff47025B0c06478C0FADaf9c6E',
                                    privateKey: 'bfc514b7a895cade755f65196b4807a0635381ee16195b33e22b919ecaedf553',
                                    publicKey: '034ca1fb554b952b6794da020c8d101527a2a91884dbab671211ce77b2ec3f1a3e',
                                },
                                derivation1: {
                                    address: '0xff1ef005f5A11426343D3492d73e94bad169d900',
                                    privateKey: '074e6edfc31f8ccfd93427d204da5ada15124a25fde119b7f65b54ff283b6207',
                                    publicKey: '03606b5f63932b2a896c3fb3aa7f60f0f5aa9cd7ce8310199cae2c06514159f799',
                                },
                                password: {
                                    address: '0xb73C6AaDb67238323d811469A95E8e2B92cC0B4A',
                                    privateKey: '743594169177ae8ab3dd08a6e22842a2ac43dbe886a73eebc33cd21e73175661',
                                    publicKey: '03aa657da15ceb192b73a3aa3a36512a765d9c9751763dd7801585fba8d10f7467',
                                },
                            },
                        ];
                        expect(mnemonics.length).toEqual(expectedPrivateKeys.length);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < mnemonics.length)) return [3 /*break*/, 6];
                        expect((0, account_2.validateMnemonic)(mnemonics[i])).toBe(true);
                        return [4 /*yield*/, (0, account_2.generateKeys)(mnemonics[i])];
                    case 2:
                        derivation0 = _a.sent();
                        return [4 /*yield*/, (0, account_2.generateKeys)(mnemonics[i], undefined, 0, 1)];
                    case 3:
                        derivation1 = _a.sent();
                        return [4 /*yield*/, (0, account_2.generateKeys)(mnemonics[i], 'password')];
                    case 4:
                        password = _a.sent();
                        expect({ derivation0: derivation0, derivation1: derivation1, password: password }).toEqual(expectedPrivateKeys[i]);
                        _a.label = 5;
                    case 5:
                        ++i;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        }); });
    });
    describe('.normalizeMnemonic()', function () {
        var e_3, _a;
        it('should normalize phrases with and without accents', function () {
            var e_4, _a;
            var spanishMnemonics = [
                'yerno obvio niñez pierna bebé pomelo retorno flujo sacar odio oxígeno rabo',
                'yerno obvio niñez pierna bebé pomelo retorno flujo sacar odio oxigeno rabo',
                'yerno obvio niñez pierna bebe pomelo retorno flujo sacar odio oxígeno rabo',
                'yerno obvio ninez pierna bebe pomelo retorno flujo sacar odio oxígeno rabo',
                'yerno obvio ninez pierna bebe pomelo retorno flujo sacar odio oxigeno rabo',
                'yérno obvio ninez pierña bebe pomelo retorno flujo sacar odio oxigéno rabo', // Incorrect accents.
            ];
            var expectedMnemonic = spanishMnemonics[0];
            try {
                for (var spanishMnemonics_1 = __values(spanishMnemonics), spanishMnemonics_1_1 = spanishMnemonics_1.next(); !spanishMnemonics_1_1.done; spanishMnemonics_1_1 = spanishMnemonics_1.next()) {
                    var mnemonic = spanishMnemonics_1_1.value;
                    expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(expectedMnemonic);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (spanishMnemonics_1_1 && !spanishMnemonics_1_1.done && (_a = spanishMnemonics_1.return)) _a.call(spanishMnemonics_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
        it('should not normalize accents when the word is from a different language', function () {
            var e_5, _a;
            // Cases include French mnemonic, missing one accent, and a single Spanish word mixed in, without proper accent.
            var cases = [
                {
                    mnemonic: 'declarer effrayer estime carbone bebe danger déphaser junior buisson ériger morceau cintrer',
                    language: undefined,
                    expected: 'déclarer effrayer estime carbone bebe danger déphaser junior buisson ériger morceau cintrer',
                },
                {
                    mnemonic: 'declarer effrayer estime carbone bebe danger déphaser junior buisson ériger morceau cintrer',
                    language: account_1.MnemonicLanguages.french,
                    expected: 'déclarer effrayer estime carbone bebe danger déphaser junior buisson ériger morceau cintrer',
                },
                // Expect that it will not try to normalize accents for words not in the given language.
                {
                    mnemonic: 'declarer effrayer estime carbone bebe danger déphaser junior buisson ériger morceau cintrer',
                    language: account_1.MnemonicLanguages.spanish,
                    expected: 'declarer effrayer estime carbone bebé danger déphaser junior buisson ériger morceau cintrer',
                },
            ];
            try {
                for (var cases_1 = __values(cases), cases_1_1 = cases_1.next(); !cases_1_1.done; cases_1_1 = cases_1.next()) {
                    var _b = cases_1_1.value, mnemonic = _b.mnemonic, language = _b.language, expected = _b.expected;
                    expect((0, account_2.normalizeMnemonic)(mnemonic, language)).toEqual(expected);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (cases_1_1 && !cases_1_1.done && (_a = cases_1.return)) _a.call(cases_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
        it('should normalize capitalized words to lowercase', function () {
            var mnemonic = 'female cousin RAPID exotic ribbon level equiP LeGal fuN RIVER hotel duTy TRIP youth rebel';
            var expected = 'female cousin rapid exotic ribbon level equip legal fun river hotel duty trip youth rebel';
            expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(expected);
        });
        it('should normalize extra and non-standard whitespace', function () {
            var mnemonic = ' \tfemale   cousin rapid exotic\nribbon level\u3000equip   legal fun river hotel duty trip youth rebel';
            var expected = 'female cousin rapid exotic ribbon level equip legal fun river hotel duty trip youth rebel';
            expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(expected);
        });
        it('should normalize extra and non-standard whitespace', function () {
            var mnemonic = ' \tfemale   cousin　rapid exotic\nribbon level\u3000equip   legal fun river hotel duty trip youth rebel';
            var expected = 'female cousin rapid exotic ribbon level equip legal fun river hotel duty trip youth rebel';
            expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(expected);
        });
        it('should normalize whitespace of Japanese mnemonics using ideographic spaces', function () {
            var mnemonic = ' せけん　まなぶ　せんえい　ねっしん　はくしゅ　うなずく　いがく　ひこく\nにちようび　いがく　なふだ　ばかり　どんぶり\tせきらんうん きかく　';
            var expected = 'せけん　まなぶ　せんえい　ねっしん　はくしゅ　うなずく　いがく　ひこく　にちようび　いがく　なふだ　ばかり　どんぶり　せきらんうん　きかく';
            expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(expected);
        });
        var _loop_3 = function (language) {
            it("should pass through newly generated mnemonics in " + account_1.MnemonicLanguages[language], function () { return __awaiter(void 0, void 0, void 0, function () {
                var mnemonic;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, (0, account_2.generateMnemonic)(account_2.MnemonicStrength.s256_24words, language)];
                        case 1:
                            mnemonic = _a.sent();
                            expect((0, account_2.normalizeMnemonic)(mnemonic)).toEqual(mnemonic);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        try {
            for (var _b = __values((0, account_2.getAllLanguages)()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var language = _c.value;
                _loop_3(language);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    });
    describe('.invalidMnemonicWords()', function () {
        it('should return list of invalid words in a phrase with errors', function () {
            var mnemonic = 'salute roayl possible rare dufbuty wabnt ynfikd oik cabbage labor approbe winner claw conduct spider velvet buyer level second adult payment blish inject draw';
            var invalidWords = ['roayl', 'dufbuty', 'wabnt', 'ynfikd', 'oik', 'approbe', 'blish'];
            expect((0, account_2.invalidMnemonicWords)(mnemonic)).toEqual(invalidWords);
        });
        it('should return an empty list when given a correct phrase', function () {
            var mnemonic = 'salute royal possible rare dignity want unfold oil cabbage labor approve winner claw conduct spider velvet buyer level second adult payment blush inject draw';
            expect((0, account_2.invalidMnemonicWords)(mnemonic)).toEqual([]);
        });
        it('should return undefined when the language is undetermined', function () {
            // A specially crafted phrase with equal numbers of english and spanish words, one of each being invalid.
            var mnemonic = 'oil sponsor unlock diet aprove trim usual ethics tip prepare twist hunt neto sanidad tregua cuneta cazar tirón trueno enredo tauro pan torpedo húmedo';
            expect((0, account_2.invalidMnemonicWords)(mnemonic)).not.toBeDefined();
        });
    });
    describe('.suggestMnemonicCorrections()', function () {
        it('should correct a single simple typo on the first suggestion', function () {
            var e_6, _a;
            var cases = [
                {
                    mnemonic: 'crush hollow differ mean easy ostrihc almost cherry route hurt inner bless',
                    corrected: 'crush hollow differ mean easy ostrich almost cherry route hurt inner bless',
                },
                {
                    mnemonic: 'monster note endless discover tilt glide girl wing spstial imitate mad ridge',
                    corrected: 'monster note endless discover tilt glide girl wing spatial imitate mad ridge',
                },
                {
                    mnemonic: 'mimo musgo efecto danza tariot gente gavilán visor sala imán madre potencia',
                    corrected: 'mimo musgo efecto danza tarot gente gavilán visor sala imán madre potencia',
                },
                {
                    mnemonic: 'linéaire marron dosage déborder spiral farine faibvlir virtuose risible géomètre ivresse pinceau',
                    corrected: 'linéaire marron dosage déborder spiral farine faiblir virtuose risible géomètre ivresse pinceau',
                },
                {
                    mnemonic: 'leme malandro depurar coperoi sovado extrato explanar vilarejo resolver garrafa inverno pergunta',
                    corrected: 'leme malandro depurar copeiro sovado extrato explanar vilarejo resolver garrafa inverno pergunta',
                },
            ];
            try {
                for (var cases_2 = __values(cases), cases_2_1 = cases_2.next(); !cases_2_1.done; cases_2_1 = cases_2.next()) {
                    var _b = cases_2_1.value, mnemonic = _b.mnemonic, corrected = _b.corrected;
                    expect((0, account_2.suggestMnemonicCorrections)(mnemonic).next().value).toEqual(corrected);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (cases_2_1 && !cases_2_1.done && (_a = cases_2.return)) _a.call(cases_2);
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
        it('should quickly offer the corect suggestion for a phrase with a few typos', function () {
            var e_7, _a, e_8, _b;
            // First 5 phrases were quickly copied on a keyboard to produce typos.
            var cases = [
                {
                    mnemonic: 'whear poitdoor cup shoulder diret broccoli fragile donate legend slogan crew between secrety recall asset',
                    corrected: 'wheat outdoor cup shoulder dirt broccoli fragile donate legend slogan crew between secret recall asset',
                },
                {
                    mnemonic: 'inner lottery artist cintage climb corn theroty cronze tot segement squirrel south ordinatu assume congress',
                    corrected: 'inner lottery artist vintage climb corn theory bronze toy segment squirrel south ordinary assume congress',
                },
                {
                    mnemonic: 'note evidence bubble dog style master region prosper input amazing moviuew adain awrite drisagree glasre',
                    corrected: 'note evidence bubble dog style master region prosper input amazing movie again write disagree glare',
                },
                {
                    // Note: "rent" (typo) and "tent" are both in the BIP-39 English word list.
                    mnemonic: 'cruise arom apology bracket demimnar another vorrow csninn finish walnut rural rent pledge fasgion alarm',
                    corrected: 'cruise atom apology bracket seminar another borrow cabin finish walnut rural tent pledge fashion alarm',
                },
                {
                    mnemonic: 'wisgh animal bracket stand enroll purchase wave quantuim film polar rare fury time great time',
                    corrected: 'wish animal bracket stand enroll purchase wave quantum film polar rare fury time great time',
                },
                {
                    mnemonic: 'debat connect bid lend opkay decreaser library balcony claw become squeeze usage reseccue jazzz segment dinosaur cushion sing markvle iundo depth bag object trash',
                    corrected: 'debate connect bid lend okay decrease library balcony claw become squeeze usage rescue jazz segment dinosaur cushion sing marble undo depth bag object trash',
                },
                {
                    mnemonic: 'salute roayl possible rare dufbuty wabnt ynfikd oik cabbage labor approbe winner claw conduct spider velvet buyer level second adult payment blish inject draw',
                    corrected: 'salute royal possible rare dignity want unfold oil cabbage labor approve winner claw conduct spider velvet buyer level second adult payment blush inject draw',
                },
                {
                    mnemonic: 'frame mmarkety oak dissmiss bried theme avocade wgaon rabbit latin angry kind pitch wild trune chornic lamp cault into prioisty gues review parent add',
                    corrected: 'frame market oak dismiss brief theme avocado wagon rabbit latin angry kind pitch wild tube chronic lamp vault into priority guess review parent add',
                },
            ];
            try {
                for (var cases_3 = __values(cases), cases_3_1 = cases_3.next(); !cases_3_1.done; cases_3_1 = cases_3.next()) {
                    var _c = cases_3_1.value, mnemonic = _c.mnemonic, corrected = _c.corrected;
                    var attempts = 0;
                    try {
                        for (var _d = (e_8 = void 0, __values((0, account_2.suggestMnemonicCorrections)(mnemonic))), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var suggestion = _e.value;
                            attempts++;
                            if (suggestion === corrected) {
                                // Enable the following log statement to see how many attempts each phrase takes.
                                // console.log(`Phrase '${mnemonic}' corrected in ${attempts} attempt(s)`)
                                break;
                            }
                            if (attempts >= 25) {
                                throw new Error("Phrase '" + mnemonic + "' was not corrected within 100 attempts");
                            }
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (cases_3_1 && !cases_3_1.done && (_a = cases_3.return)) _a.call(cases_3);
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
        it('should never return an invalid mnemonic', function () {
            var e_9, _a;
            var mnemonic = 'frame mmarkety oak dissmiss bried theme avocade wgaon rabbit latin angry kind pitch wild trune';
            var trials = 0;
            try {
                for (var _b = __values((0, account_2.suggestMnemonicCorrections)(mnemonic)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var suggestion = _c.value;
                    trials++;
                    expect((0, account_2.validateMnemonic)(suggestion)).toBe(true);
                    if (trials >= 100) {
                        break;
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
        it('should never return the same suggestion twice', function () {
            var e_10, _a;
            var mnemonic = 'frame mmarkety oak dissmiss bried theme avocade wgaon rabbit latin angry kind pitch wild trune';
            var seen = new Set();
            try {
                for (var _b = __values((0, account_2.suggestMnemonicCorrections)(mnemonic)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var suggestion = _c.value;
                    expect(seen.has(suggestion)).toBe(false);
                    seen.add(suggestion);
                    if (seen.size >= 100) {
                        break;
                    }
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_10) throw e_10.error; }
            }
        });
    });
});
//# sourceMappingURL=account.test.js.map