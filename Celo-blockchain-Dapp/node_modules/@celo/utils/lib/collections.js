"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.linkedListChanges = exports.linkedListChange = exports.zip3 = exports.zip = exports.zeroRange = exports.notEmpty = exports.intersection = void 0;
var base = __importStar(require("@celo/base/lib/collections"));
// Exports moved to @celo/base, forwarding them
// here for backwards compatibility
var collections_1 = require("@celo/base/lib/collections");
Object.defineProperty(exports, "intersection", { enumerable: true, get: function () { return collections_1.intersection; } });
Object.defineProperty(exports, "notEmpty", { enumerable: true, get: function () { return collections_1.notEmpty; } });
Object.defineProperty(exports, "zeroRange", { enumerable: true, get: function () { return collections_1.zeroRange; } });
Object.defineProperty(exports, "zip", { enumerable: true, get: function () { return collections_1.zip; } });
Object.defineProperty(exports, "zip3", { enumerable: true, get: function () { return collections_1.zip3; } });
// BigNumber comparator
var bigNumberComparator = function (a, b) { return a.lt(b); };
function linkedListChange(sortedList, change) {
    return base.linkedListChange(sortedList, change, bigNumberComparator);
}
exports.linkedListChange = linkedListChange;
function linkedListChanges(sortedList, changeList) {
    return base.linkedListChanges(sortedList, changeList, bigNumberComparator);
}
exports.linkedListChanges = linkedListChanges;
//# sourceMappingURL=collections.js.map