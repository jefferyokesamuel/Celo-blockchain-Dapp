"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isValidAddress = exports.isValidPrivateKey = exports.publicKeyToAddress = exports.privateKeyToPublicKey = exports.privateKeyToAddress = exports.toChecksumAddress = exports.isValidChecksumAddress = exports.trimLeading0x = exports.NULL_ADDRESS = exports.normalizeAddressWith0x = exports.normalizeAddress = exports.mapAddressListOnto = exports.mapAddressListDataOnto = exports.isHexString = exports.hexToBuffer = exports.getAddressChunks = exports.findAddressIndex = exports.eqAddress = exports.ensureLeading0x = exports.bufferToHex = void 0;
var address_1 = require("@celo/base/lib/address");
var ethereumjs_util_1 = require("ethereumjs-util");
var Web3Utils = __importStar(require("web3-utils"));
// Exports moved to @celo/base, forwarding them
// here for backwards compatibility
var address_2 = require("@celo/base/lib/address");
Object.defineProperty(exports, "bufferToHex", { enumerable: true, get: function () { return address_2.bufferToHex; } });
Object.defineProperty(exports, "ensureLeading0x", { enumerable: true, get: function () { return address_2.ensureLeading0x; } });
Object.defineProperty(exports, "eqAddress", { enumerable: true, get: function () { return address_2.eqAddress; } });
Object.defineProperty(exports, "findAddressIndex", { enumerable: true, get: function () { return address_2.findAddressIndex; } });
Object.defineProperty(exports, "getAddressChunks", { enumerable: true, get: function () { return address_2.getAddressChunks; } });
Object.defineProperty(exports, "hexToBuffer", { enumerable: true, get: function () { return address_2.hexToBuffer; } });
Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return address_2.isHexString; } });
Object.defineProperty(exports, "mapAddressListDataOnto", { enumerable: true, get: function () { return address_2.mapAddressListDataOnto; } });
Object.defineProperty(exports, "mapAddressListOnto", { enumerable: true, get: function () { return address_2.mapAddressListOnto; } });
Object.defineProperty(exports, "normalizeAddress", { enumerable: true, get: function () { return address_2.normalizeAddress; } });
Object.defineProperty(exports, "normalizeAddressWith0x", { enumerable: true, get: function () { return address_2.normalizeAddressWith0x; } });
Object.defineProperty(exports, "NULL_ADDRESS", { enumerable: true, get: function () { return address_2.NULL_ADDRESS; } });
Object.defineProperty(exports, "trimLeading0x", { enumerable: true, get: function () { return address_2.trimLeading0x; } });
var ethereumjs_util_2 = require("ethereumjs-util");
Object.defineProperty(exports, "isValidChecksumAddress", { enumerable: true, get: function () { return ethereumjs_util_2.isValidChecksumAddress; } });
Object.defineProperty(exports, "toChecksumAddress", { enumerable: true, get: function () { return ethereumjs_util_2.toChecksumAddress; } });
var privateKeyToAddress = function (privateKey) {
    return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.privateToAddress)((0, address_1.hexToBuffer)(privateKey)).toString('hex')));
};
exports.privateKeyToAddress = privateKeyToAddress;
var privateKeyToPublicKey = function (privateKey) {
    return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.privateToPublic)((0, address_1.hexToBuffer)(privateKey)).toString('hex')));
};
exports.privateKeyToPublicKey = privateKeyToPublicKey;
var publicKeyToAddress = function (publicKey) {
    return (0, ethereumjs_util_1.toChecksumAddress)((0, address_1.ensureLeading0x)((0, ethereumjs_util_1.pubToAddress)((0, ethereumjs_util_1.toBuffer)((0, address_1.ensureLeading0x)(publicKey)), true).toString('hex')));
};
exports.publicKeyToAddress = publicKeyToAddress;
var isValidPrivateKey = function (privateKey) {
    return privateKey.startsWith('0x') && (0, ethereumjs_util_1.isValidPrivate)((0, address_1.hexToBuffer)(privateKey));
};
exports.isValidPrivateKey = isValidPrivateKey;
var isValidAddress = function (input) { return Web3Utils.isAddress(input); };
exports.isValidAddress = isValidAddress;
//# sourceMappingURL=address.js.map