"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureUtils = exports.guessSigner = exports.verifyEIP712TypedDataSigner = exports.recoverEIP712TypedDataSignerVrs = exports.recoverEIP712TypedDataSignerRsv = exports.parseSignatureWithoutPrefix = exports.parseSignature = exports.verifySignature = exports.signMessageWithoutPrefix = exports.signMessage = exports.signedMessageToPublicKey = exports.LocalSigner = exports.addressToPublicKey = exports.hashMessage = exports.hashMessageWithPrefix = exports.serializeSignature = exports.POP_SIZE = exports.NativeSigner = void 0;
var signatureUtils_1 = require("@celo/base/lib/signatureUtils");
var Web3Utils = __importStar(require("web3-utils"));
var address_1 = require("./address");
var sign_typed_data_utils_1 = require("./sign-typed-data-utils");
// Exports moved to @celo/base, forwarding them
// here for backwards compatibility
var signatureUtils_2 = require("@celo/base/lib/signatureUtils");
Object.defineProperty(exports, "NativeSigner", { enumerable: true, get: function () { return signatureUtils_2.NativeSigner; } });
Object.defineProperty(exports, "POP_SIZE", { enumerable: true, get: function () { return signatureUtils_2.POP_SIZE; } });
Object.defineProperty(exports, "serializeSignature", { enumerable: true, get: function () { return signatureUtils_2.serializeSignature; } });
var ethjsutil = require('ethereumjs-util');
// If messages is a hex, the length of it should be the number of bytes
function messageLength(message) {
    if (Web3Utils.isHexStrict(message)) {
        return (message.length - 2) / 2;
    }
    return message.length;
}
// Ethereum has a special signature format that requires a prefix
// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
function hashMessageWithPrefix(message) {
    var prefix = '\x19Ethereum Signed Message:\n' + messageLength(message);
    return Web3Utils.soliditySha3(prefix, message);
}
exports.hashMessageWithPrefix = hashMessageWithPrefix;
function hashMessage(message) {
    return Web3Utils.soliditySha3({ type: 'string', value: message });
}
exports.hashMessage = hashMessage;
function addressToPublicKey(signer, signFn) {
    return __awaiter(this, void 0, void 0, function () {
        var msg, data, sig, rawsig, prefixedMsg, pubKey, computedAddr;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    msg = Buffer.from('dummy_msg_data');
                    data = '0x' + msg.toString('hex');
                    return [4 /*yield*/, signFn(data, signer)];
                case 1:
                    sig = _a.sent();
                    rawsig = ethjsutil.fromRpcSig(sig);
                    prefixedMsg = hashMessageWithPrefix(data);
                    pubKey = ethjsutil.ecrecover(Buffer.from(prefixedMsg.slice(2), 'hex'), rawsig.v, rawsig.r, rawsig.s);
                    computedAddr = ethjsutil.pubToAddress(pubKey).toString('hex');
                    if (!(0, address_1.eqAddress)(computedAddr, signer)) {
                        throw new Error('computed address !== signer');
                    }
                    return [2 /*return*/, '0x' + pubKey.toString('hex')];
            }
        });
    });
}
exports.addressToPublicKey = addressToPublicKey;
function LocalSigner(privateKey) {
    var _this = this;
    return {
        sign: function (message) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve((0, signatureUtils_1.serializeSignature)(signMessage(message, privateKey, (0, address_1.privateKeyToAddress)(privateKey))))];
            });
        }); },
    };
}
exports.LocalSigner = LocalSigner;
function signedMessageToPublicKey(message, v, r, s) {
    var pubKeyBuf = ethjsutil.ecrecover(Buffer.from(message.slice(2), 'hex'), v, Buffer.from(r.slice(2), 'hex'), Buffer.from(s.slice(2), 'hex'));
    return '0x' + pubKeyBuf.toString('hex');
}
exports.signedMessageToPublicKey = signedMessageToPublicKey;
function signMessage(message, privateKey, address) {
    return signMessageWithoutPrefix(hashMessageWithPrefix(message), (0, address_1.ensureLeading0x)(privateKey), address);
}
exports.signMessage = signMessage;
function signMessageWithoutPrefix(messageHash, privateKey, address) {
    var publicKey = ethjsutil.privateToPublic(ethjsutil.toBuffer(privateKey));
    var derivedAddress = ethjsutil.bufferToHex(ethjsutil.pubToAddress(publicKey));
    if (derivedAddress.toLowerCase() !== address.toLowerCase()) {
        throw new Error('Provided private key does not match address of intended signer');
    }
    var _a = ethjsutil.ecsign(ethjsutil.toBuffer(messageHash), ethjsutil.toBuffer(privateKey)), r = _a.r, s = _a.s, v = _a.v;
    if (!isValidSignature(address, messageHash, v, ethjsutil.bufferToHex(r), ethjsutil.bufferToHex(s))) {
        throw new Error('Unable to validate signature');
    }
    return { v: v, r: ethjsutil.bufferToHex(r), s: ethjsutil.bufferToHex(s) };
}
exports.signMessageWithoutPrefix = signMessageWithoutPrefix;
function verifySignature(message, signature, signer) {
    try {
        parseSignature(message, signature, signer);
        return true;
    }
    catch (error) {
        return false;
    }
}
exports.verifySignature = verifySignature;
function parseSignature(message, signature, signer) {
    return parseSignatureWithoutPrefix(hashMessageWithPrefix(message), signature, signer);
}
exports.parseSignature = parseSignature;
function parseSignatureWithoutPrefix(messageHash, signature, signer) {
    var _a;
    var _b = parseSignatureAsRsv(signature.slice(2)), r = _b.r, s = _b.s, v = _b.v;
    if (isValidSignature(signer, messageHash, v, r, s)) {
        return { v: v, r: r, s: s };
    }
    ;
    (_a = parseSignatureAsVrs(signature.slice(2)), r = _a.r, s = _a.s, v = _a.v);
    if (isValidSignature(signer, messageHash, v, r, s)) {
        return { v: v, r: r, s: s };
    }
    throw new Error("Unable to parse signature (expected signer " + signer + ")");
}
exports.parseSignatureWithoutPrefix = parseSignatureWithoutPrefix;
function recoverEIP712TypedDataSigner(typedData, signature, parseFunction) {
    var dataBuff = (0, sign_typed_data_utils_1.generateTypedDataHash)(typedData);
    var _a = parseFunction((0, address_1.trimLeading0x)(signature)), r = _a.r, s = _a.s, v = _a.v;
    var publicKey = ethjsutil.ecrecover(ethjsutil.toBuffer(dataBuff), v, ethjsutil.toBuffer(r), ethjsutil.toBuffer(s));
    // TODO test error handling on this
    return ethjsutil.bufferToHex(ethjsutil.pubToAddress(publicKey));
}
/**
 * Recover signer from RSV-serialized signature over signed typed data.
 * @param typedData EIP712 typed data
 * @param signature RSV signature of signed type data by signer
 * @returns string signer, or throws error if parsing fails
 */
function recoverEIP712TypedDataSignerRsv(typedData, signature) {
    return recoverEIP712TypedDataSigner(typedData, signature, parseSignatureAsRsv);
}
exports.recoverEIP712TypedDataSignerRsv = recoverEIP712TypedDataSignerRsv;
/**
 * Recover signer from VRS-serialized signature over signed typed data.
 * @param typedData EIP712 typed data
 * @param signature VRS signature of signed type data by signer
 * @returns string signer, or throws error if parsing fails
 */
function recoverEIP712TypedDataSignerVrs(typedData, signature) {
    return recoverEIP712TypedDataSigner(typedData, signature, parseSignatureAsVrs);
}
exports.recoverEIP712TypedDataSignerVrs = recoverEIP712TypedDataSignerVrs;
/**
 * @param typedData EIP712 typed data
 * @param signature VRS or SRV signature of `typedData` by `signer`
 * @param signer address to verify signed the `typedData`
 * @returns boolean, true if `signer` is a possible signer of `signature`
 */
function verifyEIP712TypedDataSigner(typedData, signature, signer) {
    var e_1, _a;
    try {
        for (var _b = __values([recoverEIP712TypedDataSignerVrs, recoverEIP712TypedDataSignerRsv]), _c = _b.next(); !_c.done; _c = _b.next()) {
            var recover = _c.value;
            try {
                if ((0, address_1.eqAddress)(recover(typedData, signature), signer)) {
                    return true;
                }
            }
            catch (e) {
                // try both serialization formats before failing to verify
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
exports.verifyEIP712TypedDataSigner = verifyEIP712TypedDataSigner;
function guessSigner(message, signature) {
    var messageHash = hashMessageWithPrefix(message);
    var _a = parseSignatureAsRsv(signature.slice(2)), r = _a.r, s = _a.s, v = _a.v;
    var publicKey = ethjsutil.ecrecover(ethjsutil.toBuffer(messageHash), v, ethjsutil.toBuffer(r), ethjsutil.toBuffer(s));
    return ethjsutil.bufferToHex(ethjsutil.pubToAddress(publicKey));
}
exports.guessSigner = guessSigner;
function parseSignatureAsVrs(signature) {
    var v = parseInt(signature.slice(0, 2), 16);
    var r = "0x" + signature.slice(2, 66);
    var s = "0x" + signature.slice(66, 130);
    if (v < 27) {
        v += 27;
    }
    return { v: v, r: r, s: s };
}
function parseSignatureAsRsv(signature) {
    var r = "0x" + signature.slice(0, 64);
    var s = "0x" + signature.slice(64, 128);
    var v = parseInt(signature.slice(128, 130), 16);
    if (v < 27) {
        v += 27;
    }
    return { r: r, s: s, v: v };
}
function isValidSignature(signer, message, v, r, s) {
    try {
        var publicKey = ethjsutil.ecrecover(ethjsutil.toBuffer(message), v, ethjsutil.toBuffer(r), ethjsutil.toBuffer(s));
        var retrievedAddress = ethjsutil.bufferToHex(ethjsutil.pubToAddress(publicKey));
        return (0, address_1.eqAddress)(retrievedAddress, signer);
    }
    catch (err) {
        return false;
    }
}
exports.SignatureUtils = {
    NativeSigner: signatureUtils_1.NativeSigner,
    LocalSigner: LocalSigner,
    signMessage: signMessage,
    signMessageWithoutPrefix: signMessageWithoutPrefix,
    parseSignature: parseSignature,
    parseSignatureWithoutPrefix: parseSignatureWithoutPrefix,
    serializeSignature: signatureUtils_1.serializeSignature,
    recoverEIP712TypedDataSignerRsv: recoverEIP712TypedDataSignerRsv,
    recoverEIP712TypedDataSignerVrs: recoverEIP712TypedDataSignerVrs,
    verifyEIP712TypedDataSigner: verifyEIP712TypedDataSigner,
};
//# sourceMappingURL=signatureUtils.js.map