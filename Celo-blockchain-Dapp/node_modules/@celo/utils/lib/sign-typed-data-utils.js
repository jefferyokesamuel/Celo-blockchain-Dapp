"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.zeroValue = exports.structHash = exports.encodeData = exports.typeHash = exports.encodeType = exports.generateTypedDataHash = exports.noString = exports.noNumber = exports.noBool = exports.defined = exports.eip712OptionalSchema = exports.eip712OptionalType = exports.EIP712_BUILTIN_TYPES = exports.EIP712_DYNAMIC_TYPES = exports.EIP712_ATOMIC_TYPES = void 0;
var address_1 = require("@celo/base/lib/address");
var bignumber_js_1 = require("bignumber.js");
var ethereumjs_util_1 = require("ethereumjs-util");
var t = __importStar(require("io-ts"));
var web3_eth_abi_1 = __importDefault(require("web3-eth-abi"));
/** Array of all EIP-712 atomic type names. */
exports.EIP712_ATOMIC_TYPES = [
    'bytes1',
    'bytes32',
    'uint8',
    'uint256',
    'int8',
    'int256',
    'bool',
    'address',
];
exports.EIP712_DYNAMIC_TYPES = ['bytes', 'string'];
exports.EIP712_BUILTIN_TYPES = exports.EIP712_ATOMIC_TYPES.concat(exports.EIP712_DYNAMIC_TYPES);
// Regular expression used to identify and parse EIP-712 array type strings.
var EIP712_ARRAY_REGEXP = /^(?<memberType>[\w<>\[\]_\-]+)(\[(?<fixedLength>\d+)?\])$/;
// Regular experssion used to identity EIP-712 integer types (e.g. int256, uint256, uint8).
var EIP712_INT_REGEXP = /^u?int\d*$/;
/**
 * Utility to build EIP712Optional<T> types to insert in EIP-712 type arrays.
 * @param typeName EIP-712 string type name. Should be builtin or defined in the EIP712Types
 * structure into which this type will be merged.
 */
var eip712OptionalType = function (typeName) {
    var _a;
    return (_a = {},
        _a["Optional<" + typeName + ">"] = [
            { name: 'defined', type: 'bool' },
            { name: 'value', type: typeName },
        ],
        _a);
};
exports.eip712OptionalType = eip712OptionalType;
/**
 * Utility to build EIP712Optional<T> schemas for encoding and decoding with io-ts.
 * @param schema io-ts type (a.k.a. schema or codec) describing the inner type.
 */
var eip712OptionalSchema = function (schema) {
    return t.type({
        defined: t.boolean,
        value: schema,
    });
};
exports.eip712OptionalSchema = eip712OptionalSchema;
/** Utility to construct an defined EIP712Optional value with inferred type. */
var defined = function (value) { return ({
    defined: true,
    value: value,
}); };
exports.defined = defined;
/** Undefined EIP712Optional type with value type boolean. */
exports.noBool = {
    defined: false,
    value: false,
};
/** Undefined EIP712Optional type with value type number. */
exports.noNumber = {
    defined: false,
    value: 0,
};
/** Undefined EIP712Optional type with value type string. */
exports.noString = {
    defined: false,
    value: '',
};
/**
 * Generates the EIP712 Typed Data hash for signing
 * @param   typedData An object that conforms to the EIP712TypedData interface
 * @return  A Buffer containing the hash of the typed data.
 */
function generateTypedDataHash(typedData) {
    return (0, ethereumjs_util_1.keccak)(Buffer.concat([
        Buffer.from('1901', 'hex'),
        structHash('EIP712Domain', typedData.domain, typedData.types),
        structHash(typedData.primaryType, typedData.message, typedData.types),
    ]));
}
exports.generateTypedDataHash = generateTypedDataHash;
/**
 * Given the primary type, and dictionary of types, this function assembles a sorted list
 * representing the transitive dependency closure of the primary type. (Inclusive of the primary
 * type itself.)
 */
function findDependencies(primaryType, types, found) {
    var e_1, _a;
    var _b;
    if (found === void 0) { found = []; }
    // If we have aready found the dependencies of this type, or it is a builtin, return early.
    if (found.includes(primaryType) || exports.EIP712_BUILTIN_TYPES.includes(primaryType)) {
        return [];
    }
    // If this is an array type, return the results for its member type.
    if (EIP712_ARRAY_REGEXP.test(primaryType)) {
        var match = EIP712_ARRAY_REGEXP.exec(primaryType);
        var memberType = (_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.memberType;
        return findDependencies(memberType, types, found);
    }
    // If this is not a builtin and is not defined, we cannot correctly construct a type encoding.
    if (types[primaryType] === undefined) {
        throw new Error("Unrecognized type " + primaryType + " is not included in the EIP-712 type list");
    }
    // Execute a depth-first search to populate the (inclusive) dependencies list.
    // By the first invarient of this function, the resulting list should not contain duplicates.
    var dependencies = [primaryType];
    try {
        for (var _c = __values(types[primaryType]), _d = _c.next(); !_d.done; _d = _c.next()) {
            var field = _d.value;
            dependencies.push.apply(dependencies, __spreadArray([], __read(findDependencies(field.type, types, found.concat(dependencies))), false));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return dependencies;
}
/**
 * Creates a string encoding of the primary type, including all dependencies.
 * E.g. "Transaction(Person from,Person to,Asset tx)Asset(address token,uint256 amount)Person(address wallet,string name)"
 */
function encodeType(primaryType, types) {
    var e_2, _a;
    var deps = findDependencies(primaryType, types);
    deps = deps.filter(function (d) { return d !== primaryType; });
    deps = [primaryType].concat(deps.sort());
    var result = '';
    try {
        for (var deps_1 = __values(deps), deps_1_1 = deps_1.next(); !deps_1_1.done; deps_1_1 = deps_1.next()) {
            var dep = deps_1_1.value;
            result += dep + "(" + types[dep].map(function (_a) {
                var name = _a.name, type = _a.type;
                return type + " " + name;
            }).join(',') + ")";
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (deps_1_1 && !deps_1_1.done && (_a = deps_1.return)) _a.call(deps_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return result;
}
exports.encodeType = encodeType;
function typeHash(primaryType, types) {
    return (0, ethereumjs_util_1.keccak)(encodeType(primaryType, types));
}
exports.typeHash = typeHash;
/** Encodes a single EIP-712 value to a 32-byte buffer */
function encodeValue(valueType, value, types) {
    var _a;
    // Encode the atomic types as their corresponding soldity ABI type.
    if (exports.EIP712_ATOMIC_TYPES.includes(valueType)) {
        // @ts-ignore TypeScript does not believe encodeParameter exists.
        var hexEncoded = web3_eth_abi_1.default.encodeParameter(valueType, normalizeValue(valueType, value));
        return Buffer.from((0, address_1.trimLeading0x)(hexEncoded), 'hex');
    }
    // Encode `string` and `bytes` types as their keccak hash.
    if (valueType === 'string') {
        // Converting to Buffer before passing to `keccak` prevents an issue where the string is
        // interpretted as a hex-encoded string when is starts with 0x.
        // https://github.com/ethereumjs/ethereumjs-util/blob/7e3be1d97b4e11fbc4924836b8c444e644f643ac/index.js#L155-L183
        return (0, ethereumjs_util_1.keccak)(Buffer.from(value, 'utf8'));
    }
    if (valueType === 'bytes') {
        // Allow the user to use either utf8 (plain string) or hex encoding for their bytes.
        // Note: keccak throws if the value cannot be converted into a Buffer,
        return (0, ethereumjs_util_1.keccak)(value);
    }
    // Encode structs as its hashStruct (e.g. keccak(typeHash || encodeData(struct)) ).
    if (types[valueType] !== undefined) {
        // tslint:disable-next-line:no-unnecessary-type-assertion.
        return structHash(valueType, value, types);
    }
    // Encode arrays as the hash of the concatenated encoding of the underlying types.
    if (EIP712_ARRAY_REGEXP.test(valueType)) {
        // Note: If a fixed length is provided in the type, it is not checked.
        var match = EIP712_ARRAY_REGEXP.exec(valueType);
        var memberType_1 = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.memberType;
        return (0, ethereumjs_util_1.keccak)(Buffer.concat(value.map(function (member) { return encodeValue(memberType_1, member, types); })));
    }
    throw new Error("Unrecognized or unsupported type in EIP-712 encoding: " + valueType);
}
function normalizeValue(type, value) {
    var normalizedValue = EIP712_INT_REGEXP.test(type) && bignumber_js_1.BigNumber.isBigNumber(value) ? value.toString() : value;
    return normalizedValue;
}
/**
 * Constructs the struct encoding of the data as the primary type.
 */
function encodeData(primaryType, data, types) {
    var fields = types[primaryType];
    if (fields === undefined) {
        throw new Error("Unrecognized primary type in EIP-712 encoding: " + primaryType);
    }
    return Buffer.concat(fields.map(function (field) { return encodeValue(field.type, data[field.name], types); }));
}
exports.encodeData = encodeData;
function structHash(primaryType, data, types) {
    return (0, ethereumjs_util_1.keccak)(Buffer.concat([typeHash(primaryType, types), encodeData(primaryType, data, types)]));
}
exports.structHash = structHash;
/**
 * Produce the zero value for a given type.
 *
 * @remarks
 * All atomic types will encode as the 32-byte zero value. Dynamic types as an empty hash.
 * Dynamic arrays will return an empty array. Fixed length arrays will have members set to zero.
 * Structs will have the values of all fields set to zero recursively.
 *
 * Note that EIP-712 does not specify zero values, and so this is non-standard.
 */
function zeroValue(primaryType, types) {
    var _a, _b;
    if (types === void 0) { types = {}; }
    // If the type is a built-in, return a pre-defined zero value.
    if (['bytes', 'bytes1', 'bytes32'].includes(primaryType)) {
        return Buffer.alloc(0);
    }
    if (['uint8', 'uint256', 'int8', 'int256'].includes(primaryType)) {
        return 0;
    }
    if (primaryType === 'bool') {
        return false;
    }
    if (primaryType === 'address') {
        return address_1.NULL_ADDRESS;
    }
    if (primaryType === 'string') {
        return '';
    }
    // If the type is an array, return an empty array or an array of the given fixed length.
    if (EIP712_ARRAY_REGEXP.test(primaryType)) {
        var match = EIP712_ARRAY_REGEXP.exec(primaryType);
        var memberType_2 = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.memberType;
        var fixedLengthStr = (_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.fixedLength;
        var fixedLength = fixedLengthStr === undefined ? 0 : parseInt(fixedLengthStr, 10);
        return __spreadArray([], __read(Array(fixedLength).keys()), false).map(function () { return zeroValue(memberType_2, types); });
    }
    // Must be user-defined type. Return an object with all fields set to their zero value.
    var fields = types[primaryType];
    if (fields === undefined) {
        throw new Error("Unrecognized primary type for EIP-712 zero value: " + primaryType);
    }
    return fields.reduce(function (obj, field) {
        var _a;
        return (__assign(__assign({}, obj), (_a = {}, _a[field.name] = zeroValue(field.type, types), _a)));
    }, {});
}
exports.zeroValue = zeroValue;
//# sourceMappingURL=sign-typed-data-utils.js.map