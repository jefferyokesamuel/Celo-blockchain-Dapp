"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountUtils = exports.generateKeysFromSeed = exports.generateSeed = exports.generateDeterministicInviteCode = exports.generateKeys = exports.suggestMnemonicCorrections = exports.detectMnemonicLanguage = exports.mnemonicLengthFromStrength = exports.getAllLanguages = exports.formatNonAccentedCharacters = exports.normalizeMnemonic = exports.invalidMnemonicWords = exports.validateMnemonic = exports.generateMnemonic = exports.MnemonicStrength = exports.MnemonicLanguages = exports.CELO_DERIVATION_PATH_BASE = void 0;
var account_1 = require("@celo/base/lib/account");
var string_1 = require("@celo/base/lib/string");
var bip32 = __importStar(require("bip32"));
var bip39 = __importStar(require("bip39"));
var ethereumjs_util_1 = require("ethereumjs-util");
var randombytes_1 = __importDefault(require("randombytes"));
var address_1 = require("./address");
var levenshtein_1 = require("./levenshtein");
// Exports moved to @celo/base, forwarding them
// here for backwards compatibility
var account_2 = require("@celo/base/lib/account");
Object.defineProperty(exports, "CELO_DERIVATION_PATH_BASE", { enumerable: true, get: function () { return account_2.CELO_DERIVATION_PATH_BASE; } });
Object.defineProperty(exports, "MnemonicLanguages", { enumerable: true, get: function () { return account_2.MnemonicLanguages; } });
Object.defineProperty(exports, "MnemonicStrength", { enumerable: true, get: function () { return account_2.MnemonicStrength; } });
function defaultGenerateMnemonic(strength, rng, wordlist) {
    return new Promise(function (resolve, reject) {
        strength = strength || 128;
        rng = rng || randombytes_1.default;
        rng(strength / 8, function (error, randomBytesBuffer) {
            if (error) {
                reject(error);
            }
            else {
                resolve(bip39.entropyToMnemonic(randomBytesBuffer.toString('hex'), wordlist));
            }
        });
    });
}
var bip39Wrapper = {
    mnemonicToSeedSync: bip39.mnemonicToSeedSync,
    mnemonicToSeed: bip39.mnemonicToSeed,
    generateMnemonic: defaultGenerateMnemonic,
    validateMnemonic: bip39.validateMnemonic,
};
function generateMnemonic(strength, language, bip39ToUse) {
    if (strength === void 0) { strength = account_1.MnemonicStrength.s256_24words; }
    if (bip39ToUse === void 0) { bip39ToUse = bip39Wrapper; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, bip39ToUse.generateMnemonic(strength, undefined, getWordList(language))];
        });
    });
}
exports.generateMnemonic = generateMnemonic;
function validateMnemonic(mnemonic, bip39ToUse, language) {
    var e_1, _a;
    if (bip39ToUse === void 0) { bip39ToUse = bip39Wrapper; }
    if (language !== undefined) {
        return bip39ToUse.validateMnemonic(mnemonic, getWordList(language));
    }
    var languages = getAllLanguages();
    try {
        for (var languages_1 = __values(languages), languages_1_1 = languages_1.next(); !languages_1_1.done; languages_1_1 = languages_1.next()) {
            var guessedLanguage = languages_1_1.value;
            if (bip39ToUse.validateMnemonic(mnemonic, getWordList(guessedLanguage))) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (languages_1_1 && !languages_1_1.done && (_a = languages_1.return)) _a.call(languages_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
}
exports.validateMnemonic = validateMnemonic;
/**
 * Return a list of the words in the mnemonic that are not in the list of valid BIP-39 words for the
 * specified or detected language.
 *
 * @remarks Will return undefined if the language cannot be detected (e.g.  all the words are
 * invalid, or half of the valid words are from one language and the other half from another.)
 */
function invalidMnemonicWords(mnemonic, language) {
    var words = splitMnemonic(mnemonic);
    var detectedLanguage = language !== null && language !== void 0 ? language : detectMnemonicLanguage(words);
    if (detectedLanguage === undefined) {
        return undefined;
    }
    var wordSet = new Set(getWordList(detectedLanguage));
    return words.filter(function (word) { return !wordSet.has(word); });
}
exports.invalidMnemonicWords = invalidMnemonicWords;
/**
 * Normalize the mnemonic phrase to eliminate a number of inconsistencies with standard BIP-39
 * phrases that are likely to arise when a user manually enters a phrase.
 *
 * @remarks Note that this does not guarantee that the output is a valid mnemonic phrase, or even
 * that all the words in the phrase are contained in a valid wordlist.
 */
function normalizeMnemonic(mnemonic, language) {
    var words = splitMnemonic(mnemonic);
    var lowered = words.map(function (word) { return word.toLowerCase(); });
    var detectedLanguage = language !== null && language !== void 0 ? language : detectMnemonicLanguage(lowered);
    // If the language is unknown, do not run further normalizations.
    if (detectedLanguage === undefined) {
        return joinMnemonic(lowered, detectedLanguage);
    }
    return joinMnemonic(formatNonAccentedWords(lowered, detectedLanguage), detectedLanguage);
}
exports.normalizeMnemonic = normalizeMnemonic;
/**
 * Scans the provided phrase and adds accents to words where the are not provided, or provided
 * inconsistently with the BIP-39 standard. Ensures that phrases differing only by accents will
 * validate after being cast into the normalized form.
 *
 * @remarks Words should be converted to lower case before being given to this function.
 */
function formatNonAccentedWords(words, language) {
    if (isLatinBasedLanguage(language)) {
        var wordList = getWordList(language);
        var normalizedWordMap_1 = new Map(wordList.map(function (word) { return [(0, string_1.normalizeAccents)(word), word]; }));
        return words.map(function (word) { var _a; return (_a = normalizedWordMap_1.get((0, string_1.normalizeAccents)(word))) !== null && _a !== void 0 ? _a : word; });
    }
    return words;
}
function isLatinBasedLanguage(language) {
    // Use exhaustive switch to ensure that every language is accounted for.
    switch (language) {
        case account_1.MnemonicLanguages.english:
        case account_1.MnemonicLanguages.french:
        case account_1.MnemonicLanguages.italian:
        case account_1.MnemonicLanguages.spanish:
        case account_1.MnemonicLanguages.portuguese:
            return true;
        case account_1.MnemonicLanguages.chinese_simplified:
        case account_1.MnemonicLanguages.chinese_traditional:
        case account_1.MnemonicLanguages.japanese:
        case account_1.MnemonicLanguages.korean:
            return false;
    }
}
/**
 * @deprecated now an alias for normalizeMnemonic.
 */
function formatNonAccentedCharacters(mnemonic) {
    return normalizeMnemonic(mnemonic);
}
exports.formatNonAccentedCharacters = formatNonAccentedCharacters;
// Unify the bip39.wordlists (otherwise depends on the instance of the bip39)
function getWordList(language) {
    // Use exhaustive switch to ensure that every language is accounted for.
    switch (language !== null && language !== void 0 ? language : account_1.MnemonicLanguages.english) {
        case account_1.MnemonicLanguages.chinese_simplified:
            return bip39.wordlists.chinese_simplified;
        case account_1.MnemonicLanguages.chinese_traditional:
            return bip39.wordlists.chinese_traditional;
        case account_1.MnemonicLanguages.english:
            return bip39.wordlists.english;
        case account_1.MnemonicLanguages.french:
            return bip39.wordlists.french;
        case account_1.MnemonicLanguages.italian:
            return bip39.wordlists.italian;
        case account_1.MnemonicLanguages.japanese:
            return bip39.wordlists.japanese;
        case account_1.MnemonicLanguages.korean:
            return bip39.wordlists.korean;
        case account_1.MnemonicLanguages.spanish:
            return bip39.wordlists.spanish;
        case account_1.MnemonicLanguages.portuguese:
            return bip39.wordlists.portuguese;
    }
}
function getAllLanguages() {
    return [
        account_1.MnemonicLanguages.chinese_simplified,
        account_1.MnemonicLanguages.chinese_traditional,
        account_1.MnemonicLanguages.english,
        account_1.MnemonicLanguages.french,
        account_1.MnemonicLanguages.italian,
        account_1.MnemonicLanguages.japanese,
        account_1.MnemonicLanguages.korean,
        account_1.MnemonicLanguages.spanish,
        account_1.MnemonicLanguages.portuguese,
    ];
}
exports.getAllLanguages = getAllLanguages;
function mnemonicLengthFromStrength(strength) {
    switch (strength) {
        case account_1.MnemonicStrength.s128_12words:
            return 12;
        case account_1.MnemonicStrength.s256_24words:
            return 24;
    }
}
exports.mnemonicLengthFromStrength = mnemonicLengthFromStrength;
/**
 * Splits a mnemonic phrase into words, handling extra whitespace anywhere in the phrase.
 */
function splitMnemonic(mnemonic) {
    return __spreadArray([], __read(mnemonic.trim().split(/\s+/)), false);
}
/**
 * Joins a list of words into a mnemonic phrase. Inverse of splitMnemonic.
 */
function joinMnemonic(words, language) {
    return words.join(language === account_1.MnemonicLanguages.japanese ? '\u3000' : ' ');
}
/**
 * Detects the language of tokenized mnemonic phrase by applying a heuristic.
 *
 * @remarks Uses a heuristic of returning the language with the most matching words. In practice, we
 * expect all words to come from a single language, also some may be misspelled or otherwise
 * malformed. It may occasionally occur that a typo results in word from another language (e.g. bag
 * -> bagr) but this should occur at most once or twice per phrase.
 */
function detectMnemonicLanguage(words, candidates) {
    // Assign a match score to each language by how many words of the phrase are in each language.
    var scores = (candidates !== null && candidates !== void 0 ? candidates : getAllLanguages()).map(function (candidate) {
        var wordSet = new Set(getWordList(candidate));
        var score = words.reduce(function (count, word) { return (wordSet.has(word) ? count + 1 : count); }, 0);
        return [candidate, score];
    });
    // Reduce to the highest scoring candidate(s). Note that it is possible for multiple candidates to
    // have the same score, but it likely to occur only for specially constructed phrases.
    var _a = __read(scores.reduce(function (_a, _b) {
        var _c = __read(_a, 2), leaders = _c[0], leadingScore = _c[1];
        var _d = __read(_b, 2), candidate = _d[0], score = _d[1];
        if (score > leadingScore) {
            return [[candidate], score];
        }
        else if (score === leadingScore) {
            return [__spreadArray(__spreadArray([], __read(leaders), false), [candidate], false), leadingScore];
        }
        return [leaders, leadingScore];
    }, [[], 0]), 2), winners = _a[0], highscore = _a[1];
    if (winners.length !== 1 || highscore < 1) {
        return undefined;
    }
    return winners[0];
}
exports.detectMnemonicLanguage = detectMnemonicLanguage;
/**
 * Generates a list of suggested corrections to the mnemonic phrase based on a set of heuristics.
 *
 * @remarks
 * Each yielded suggestion represents an attempt to correct the seed phrase by replacing any invalid
 * words with the most likely valid words. Returned suggestions phrases are ordered by probability
 * based on a noisy channel model, described in detail in CIP-39.
 *
 * The generated list of suggestions is exponential in size, and effectively infinite. One should
 * not attempt to generate the entire list.
 *
 * All yielded suggestions will have a valid checksum, but are not guaranteed to correspond to any
 * given wallet. If the phrase is being used to recover a wallet with non-zero balance, it is
 * suggested that the caller check the balance of the derived wallet address. If the balance is
 * non-zero, they can be sure that the phrase is correct. If it is zero, then they should continue
 * and try the next suggestion.
 *
 * It is recommended to normalize the mnemonic phrase before inputting to this function.
 *
 * @privateRemarks
 * TODO(victor): Include a heuristic rule for phrase-level corrections, such as word ordering swaps.
 */
function suggestMnemonicCorrections(mnemonic, language, strength) {
    var words, expectedLength, lang, _a, _b, suggestion, phrase, e_2_1;
    var e_2, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                words = splitMnemonic(mnemonic);
                expectedLength = strength && mnemonicLengthFromStrength(strength);
                if ((expectedLength && words.length !== expectedLength) || words.length % 3 !== 0) {
                    return [2 /*return*/];
                }
                lang = language !== null && language !== void 0 ? language : detectMnemonicLanguage(words);
                if (lang === undefined) {
                    return [2 /*return*/];
                }
                _d.label = 1;
            case 1:
                _d.trys.push([1, 6, 7, 8]);
                _a = __values(suggestUnvalidatedCorrections(words, lang)), _b = _a.next();
                _d.label = 2;
            case 2:
                if (!!_b.done) return [3 /*break*/, 5];
                suggestion = _b.value;
                phrase = joinMnemonic(suggestion, lang);
                if (!validateMnemonic(phrase, undefined, lang)) return [3 /*break*/, 4];
                return [4 /*yield*/, phrase];
            case 3:
                _d.sent();
                _d.label = 4;
            case 4:
                _b = _a.next();
                return [3 /*break*/, 2];
            case 5: return [3 /*break*/, 8];
            case 6:
                e_2_1 = _d.sent();
                e_2 = { error: e_2_1 };
                return [3 /*break*/, 8];
            case 7:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
                return [7 /*endfinally*/];
            case 8: return [2 /*return*/];
        }
    });
}
exports.suggestMnemonicCorrections = suggestMnemonicCorrections;
/// Generates a list of suggested phases based on an edit distance correction heuristic.
function suggestUnvalidatedCorrections(words, language) {
    // Combine the given suggestions lists to produce all combinations with weight, defined as the sum
    // edit distances for all chosen words, equal to the given weight value.
    // The set of suggestions yielded with a given weight is disjoint from the set of suggestions
    // yielded with any other given weight.
    function combineSuggestions(suggestionsLists, weight) {
        var suggestions, remaining, _a, _b, distance, _c, _d, list, _e, _f, suggestion, e_4_1, e_5_1, e_6_1;
        var e_6, _g, e_5, _h, e_4, _j;
        var _k, _l, _m;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    if (suggestionsLists.length < 1 || weight < 0) {
                        throw Error('programming error: suggestions map must have at least one entry');
                    }
                    suggestions = suggestionsLists[0];
                    if (!(suggestionsLists.length === 1)) return [3 /*break*/, 2];
                    return [5 /*yield**/, __values((_l = (_k = suggestions.get(weight)) === null || _k === void 0 ? void 0 : _k.map(function (suggestion) { return [suggestion]; })) !== null && _l !== void 0 ? _l : [])];
                case 1:
                    _o.sent();
                    return [2 /*return*/];
                case 2:
                    remaining = __spreadArray([], __read(suggestionsLists.slice(1)), false);
                    _o.label = 3;
                case 3:
                    _o.trys.push([3, 20, 21, 22]);
                    _a = __values(__spreadArray([], __read(suggestions.keys()), false).sort()), _b = _a.next();
                    _o.label = 4;
                case 4:
                    if (!!_b.done) return [3 /*break*/, 19];
                    distance = _b.value;
                    if (distance > weight) {
                        return [3 /*break*/, 19];
                    }
                    _o.label = 5;
                case 5:
                    _o.trys.push([5, 16, 17, 18]);
                    _c = (e_5 = void 0, __values(combineSuggestions(remaining, weight - distance))), _d = _c.next();
                    _o.label = 6;
                case 6:
                    if (!!_d.done) return [3 /*break*/, 15];
                    list = _d.value;
                    _o.label = 7;
                case 7:
                    _o.trys.push([7, 12, 13, 14]);
                    _e = (e_4 = void 0, __values((_m = suggestions.get(distance)) !== null && _m !== void 0 ? _m : [])), _f = _e.next();
                    _o.label = 8;
                case 8:
                    if (!!_f.done) return [3 /*break*/, 11];
                    suggestion = _f.value;
                    return [4 /*yield*/, __spreadArray([suggestion], __read(list), false)];
                case 9:
                    _o.sent();
                    _o.label = 10;
                case 10:
                    _f = _e.next();
                    return [3 /*break*/, 8];
                case 11: return [3 /*break*/, 14];
                case 12:
                    e_4_1 = _o.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 14];
                case 13:
                    try {
                        if (_f && !_f.done && (_j = _e.return)) _j.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                    return [7 /*endfinally*/];
                case 14:
                    _d = _c.next();
                    return [3 /*break*/, 6];
                case 15: return [3 /*break*/, 18];
                case 16:
                    e_5_1 = _o.sent();
                    e_5 = { error: e_5_1 };
                    return [3 /*break*/, 18];
                case 17:
                    try {
                        if (_d && !_d.done && (_h = _c.return)) _h.call(_c);
                    }
                    finally { if (e_5) throw e_5.error; }
                    return [7 /*endfinally*/];
                case 18:
                    _b = _a.next();
                    return [3 /*break*/, 4];
                case 19: return [3 /*break*/, 22];
                case 20:
                    e_6_1 = _o.sent();
                    e_6 = { error: e_6_1 };
                    return [3 /*break*/, 22];
                case 21:
                    try {
                        if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                    }
                    finally { if (e_6) throw e_6.error; }
                    return [7 /*endfinally*/];
                case 22: return [2 /*return*/];
            }
        });
    }
    var spotSuggestions, weight, _a, _b, suggestedWords, e_3_1;
    var e_3, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                spotSuggestions = words.map(function (word) {
                    return wordSuggestions(word, language);
                });
                weight = 0;
                _d.label = 1;
            case 1:
                if (!(weight < 1000)) return [3 /*break*/, 10];
                _d.label = 2;
            case 2:
                _d.trys.push([2, 7, 8, 9]);
                _a = (e_3 = void 0, __values(combineSuggestions(spotSuggestions, weight))), _b = _a.next();
                _d.label = 3;
            case 3:
                if (!!_b.done) return [3 /*break*/, 6];
                suggestedWords = _b.value;
                return [4 /*yield*/, suggestedWords];
            case 4:
                _d.sent();
                _d.label = 5;
            case 5:
                _b = _a.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_3_1 = _d.sent();
                e_3 = { error: e_3_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_3) throw e_3.error; }
                return [7 /*endfinally*/];
            case 9:
                weight++;
                return [3 /*break*/, 1];
            case 10: return [2 /*return*/];
        }
    });
}
// Given a word and lnaguage, returns a map of all words in the BIP-39 word list for the given
// language by edit distance. This is used as word replacement suggestions.
function wordSuggestions(typo, language) {
    return getWordList(language)
        .map(function (word) { return ({ distance: (0, levenshtein_1.levenshteinDistance)(typo, word), word: word }); })
        .reduce(function (map, _a) {
        var distance = _a.distance, word = _a.word;
        // Reduction uses mutation, instead of spread, as an optimization.
        var list = map.get(distance);
        if (list !== undefined) {
            list.push(word);
        }
        else {
            map.set(distance, [word]);
        }
        return map;
    }, new Map());
}
function generateKeys(mnemonic, password, changeIndex, addressIndex, bip39ToUse, derivationPath) {
    if (changeIndex === void 0) { changeIndex = 0; }
    if (addressIndex === void 0) { addressIndex = 0; }
    if (bip39ToUse === void 0) { bip39ToUse = bip39Wrapper; }
    if (derivationPath === void 0) { derivationPath = account_1.CELO_DERIVATION_PATH_BASE; }
    return __awaiter(this, void 0, void 0, function () {
        var seed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, generateSeed(mnemonic, password, bip39ToUse)];
                case 1:
                    seed = _a.sent();
                    return [2 /*return*/, generateKeysFromSeed(seed, changeIndex, addressIndex, derivationPath)];
            }
        });
    });
}
exports.generateKeys = generateKeys;
function generateDeterministicInviteCode(recipientPhoneHash, recipientPepper, addressIndex, changeIndex, derivationPath) {
    if (addressIndex === void 0) { addressIndex = 0; }
    if (changeIndex === void 0) { changeIndex = 0; }
    if (derivationPath === void 0) { derivationPath = account_1.CELO_DERIVATION_PATH_BASE; }
    var seed = (0, ethereumjs_util_1.keccak256)(recipientPhoneHash + recipientPepper);
    return generateKeysFromSeed(seed, changeIndex, addressIndex, derivationPath);
}
exports.generateDeterministicInviteCode = generateDeterministicInviteCode;
// keyByteLength truncates the seed. *Avoid its use*
// It was added only because a backwards compatibility bug
function generateSeed(mnemonic, password, bip39ToUse, keyByteLength) {
    if (bip39ToUse === void 0) { bip39ToUse = bip39Wrapper; }
    if (keyByteLength === void 0) { keyByteLength = 64; }
    return __awaiter(this, void 0, void 0, function () {
        var seed, bufAux;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, bip39ToUse.mnemonicToSeed(mnemonic, password)];
                case 1:
                    seed = _a.sent();
                    if (keyByteLength > 0 && seed.byteLength > keyByteLength) {
                        bufAux = Buffer.allocUnsafe(keyByteLength);
                        seed.copy(bufAux, 0, 0, keyByteLength);
                        seed = bufAux;
                    }
                    return [2 /*return*/, seed];
            }
        });
    });
}
exports.generateSeed = generateSeed;
function generateKeysFromSeed(seed, changeIndex, addressIndex, derivationPath) {
    if (changeIndex === void 0) { changeIndex = 0; }
    if (addressIndex === void 0) { addressIndex = 0; }
    if (derivationPath === void 0) { derivationPath = account_1.CELO_DERIVATION_PATH_BASE; }
    var node = bip32.fromSeed(seed);
    var newNode = node.derivePath("" + (derivationPath ? derivationPath + "/" : '') + changeIndex + "/" + addressIndex);
    if (!newNode.privateKey) {
        // As we are generating the node from a seed, the node will always have a private key and this would never happened
        throw new Error('utils-accounts@generateKeys: invalid node to derivate');
    }
    return {
        privateKey: newNode.privateKey.toString('hex'),
        publicKey: newNode.publicKey.toString('hex'),
        address: (0, address_1.privateKeyToAddress)(newNode.privateKey.toString('hex')),
    };
}
exports.generateKeysFromSeed = generateKeysFromSeed;
exports.AccountUtils = {
    detectMnemonicLanguage: detectMnemonicLanguage,
    generateMnemonic: generateMnemonic,
    normalizeMnemonic: normalizeMnemonic,
    validateMnemonic: validateMnemonic,
    invalidMnemonicWords: invalidMnemonicWords,
    suggestMnemonicCorrections: suggestMnemonicCorrections,
    generateKeys: generateKeys,
    generateSeed: generateSeed,
    generateKeysFromSeed: generateKeysFromSeed,
};
//# sourceMappingURL=account.js.map