"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateInput = exports.validatePhone = exports.ValidatorKind = exports.validateInteger = exports.validateDecimal = void 0;
var inputValidation_1 = require("@celo/base/lib/inputValidation");
var phoneNumbers_1 = require("./phoneNumbers");
// Exports moved to @celo/base, forwarding them
// here for backwards compatibility
var inputValidation_2 = require("@celo/base/lib/inputValidation");
Object.defineProperty(exports, "validateDecimal", { enumerable: true, get: function () { return inputValidation_2.validateDecimal; } });
Object.defineProperty(exports, "validateInteger", { enumerable: true, get: function () { return inputValidation_2.validateInteger; } });
Object.defineProperty(exports, "ValidatorKind", { enumerable: true, get: function () { return inputValidation_2.ValidatorKind; } });
function validatePhone(input, countryCallingCode) {
    input = input.replace(/[^0-9()\- ]/g, '');
    if (!countryCallingCode) {
        return input;
    }
    var displayNumber = (0, phoneNumbers_1.getDisplayPhoneNumber)(input, countryCallingCode);
    if (!displayNumber) {
        return input;
    }
    return displayNumber;
}
exports.validatePhone = validatePhone;
function validateInput(input, props) {
    if (!props.validator && !props.customValidator) {
        return input;
    }
    switch (props.validator) {
        case 'decimal':
            return (0, inputValidation_1.validateDecimal)(input, props.decimalSeparator);
        case 'integer':
            return (0, inputValidation_1.validateInteger)(input);
        case 'phone':
            return validatePhone(input, props.countryCallingCode);
        case 'custom': {
            if (props.customValidator) {
                return props.customValidator(input);
            }
        }
    }
    throw new Error('Unhandled input validator');
}
exports.validateInput = validateInput;
//# sourceMappingURL=inputValidation.js.map