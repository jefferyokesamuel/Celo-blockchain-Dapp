import BigNumber from 'bignumber.js';
import { StableTokenContract } from '../base';
import { StableToken as StableTokenEnum } from '../celo-tokens';
import { GrandaMento } from '../generated/GrandaMento';
import { BaseWrapper } from './BaseWrapper';
export declare enum ExchangeProposalState {
    None = 0,
    Proposed = 1,
    Approved = 2,
    Executed = 3,
    Cancelled = 4
}
export interface GrandaMentoConfig {
    approver: string;
    spread: BigNumber;
    vetoPeriodSeconds: BigNumber;
    maxApprovalExchangeRateChange: BigNumber;
    exchangeLimits: AllStableConfig;
}
export interface StableTokenExchangeLimits {
    minExchangeAmount: BigNumber;
    maxExchangeAmount: BigNumber;
}
export interface ExchangeProposal {
    exchanger: string;
    stableToken: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    vetoPeriodSeconds: BigNumber;
    approvalTimestamp: BigNumber;
    state: ExchangeProposalState;
    sellCelo: boolean;
    id: string | number;
}
export interface ExchangeProposalReadable {
    exchanger: string;
    stableToken: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    approvalTimestamp: BigNumber;
    state: string;
    sellCelo: boolean;
    id: string | number;
    implictPricePerCelo: BigNumber;
}
declare type AllStableConfig = Map<StableTokenContract, StableTokenExchangeLimits>;
export declare class GrandaMentoWrapper extends BaseWrapper<GrandaMento> {
    owner: () => Promise<string>;
    approver: () => Promise<string>;
    setApprover: (newApprover: string) => import("@celo/connect").CeloTransactionObject<void>;
    maxApprovalExchangeRateChange: () => Promise<BigNumber>;
    setMaxApprovalExchangeRateChange: (newMaxApprovalExchangeRateChange: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    spread: () => Promise<BigNumber>;
    setSpread: (newSpread: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    vetoPeriodSeconds: () => Promise<BigNumber>;
    setVetoPeriodSeconds: (newVetoPeriodSeconds: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    exchangeProposalCount: () => Promise<BigNumber>;
    getActiveProposalIds(): Promise<string[]>;
    setStableTokenExchangeLimits: (stableTokenRegistryId: string, minExchangeAmount: string | number, maxExchangeAmount: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    approveExchangeProposal: (proposalId: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    executeExchangeProposal: (proposalId: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    cancelExchangeProposal: (proposalId: string | number) => import("@celo/connect").CeloTransactionObject<void>;
    createExchangeProposal(stableTokenRegistryId: StableTokenContract, sellAmount: BigNumber, sellCelo: boolean): Promise<import("@celo/connect").CeloTransactionObject<string>>;
    exchangeProposalExists(exchangeProposalID: string | number): Promise<boolean>;
    getExchangeProposal(exchangeProposalID: string | number): Promise<ExchangeProposal>;
    getHumanReadableExchangeProposal(exchangeProposalID: string | number): Promise<ExchangeProposalReadable>;
    stableTokenExchangeLimits(stableTokenTymbol: StableTokenEnum): Promise<StableTokenExchangeLimits>;
    getAllStableTokenLimits(): Promise<AllStableConfig>;
    getBuyAmount(celoStableTokenOracleRate: BigNumber, // Note this is intended to be a fixed point number
    sellAmount: BigNumber, sellCelo: boolean): Promise<BigNumber>;
    getConfig(): Promise<GrandaMentoConfig>;
}
export {};
