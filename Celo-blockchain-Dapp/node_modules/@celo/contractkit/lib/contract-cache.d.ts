import { CeloContract } from './base';
import { StableToken } from './celo-tokens';
import { Ierc20 } from './generated/IERC20';
import { ContractKit } from './kit';
import { AccountsWrapper } from './wrappers/Accounts';
import { AttestationsWrapper } from './wrappers/Attestations';
import { BlockchainParametersWrapper } from './wrappers/BlockchainParameters';
import { DoubleSigningSlasherWrapper } from './wrappers/DoubleSigningSlasher';
import { DowntimeSlasherWrapper } from './wrappers/DowntimeSlasher';
import { ElectionWrapper } from './wrappers/Election';
import { EpochRewardsWrapper } from './wrappers/EpochRewards';
import { Erc20Wrapper } from './wrappers/Erc20Wrapper';
import { EscrowWrapper } from './wrappers/Escrow';
import { ExchangeWrapper } from './wrappers/Exchange';
import { FreezerWrapper } from './wrappers/Freezer';
import { GasPriceMinimumWrapper } from './wrappers/GasPriceMinimum';
import { GoldTokenWrapper } from './wrappers/GoldTokenWrapper';
import { GovernanceWrapper } from './wrappers/Governance';
import { GrandaMentoWrapper } from './wrappers/GrandaMento';
import { LockedGoldWrapper } from './wrappers/LockedGold';
import { MetaTransactionWalletWrapper } from './wrappers/MetaTransactionWallet';
import { MetaTransactionWalletDeployerWrapper } from './wrappers/MetaTransactionWalletDeployer';
import { MultiSigWrapper } from './wrappers/MultiSig';
import { ReserveWrapper } from './wrappers/Reserve';
import { SortedOraclesWrapper } from './wrappers/SortedOracles';
import { StableTokenWrapper } from './wrappers/StableTokenWrapper';
import { ValidatorsWrapper } from './wrappers/Validators';
declare const WrapperFactories: {
    Accounts: typeof AccountsWrapper;
    Attestations: typeof AttestationsWrapper;
    BlockchainParameters: typeof BlockchainParametersWrapper;
    DoubleSigningSlasher: typeof DoubleSigningSlasherWrapper;
    DowntimeSlasher: typeof DowntimeSlasherWrapper;
    Election: typeof ElectionWrapper;
    EpochRewards: typeof EpochRewardsWrapper;
    ERC20: typeof Erc20Wrapper;
    Escrow: typeof EscrowWrapper;
    Exchange: typeof ExchangeWrapper;
    ExchangeEUR: typeof ExchangeWrapper;
    ExchangeBRL: typeof ExchangeWrapper;
    Freezer: typeof FreezerWrapper;
    GasPriceMinimum: typeof GasPriceMinimumWrapper;
    GoldToken: typeof GoldTokenWrapper;
    Governance: typeof GovernanceWrapper;
    GrandaMento: typeof GrandaMentoWrapper;
    LockedGold: typeof LockedGoldWrapper;
    MetaTransactionWallet: typeof MetaTransactionWalletWrapper;
    MetaTransactionWalletDeployer: typeof MetaTransactionWalletDeployerWrapper;
    MultiSig: typeof MultiSigWrapper;
    Reserve: typeof ReserveWrapper;
    SortedOracles: typeof SortedOraclesWrapper;
    StableToken: typeof StableTokenWrapper;
    StableTokenEUR: typeof StableTokenWrapper;
    StableTokenBRL: typeof StableTokenWrapper;
    Validators: typeof ValidatorsWrapper;
};
declare type CFType = typeof WrapperFactories;
export declare type ValidWrappers = keyof CFType;
interface WrapperCacheMap {
    [CeloContract.Accounts]?: AccountsWrapper;
    [CeloContract.Attestations]?: AttestationsWrapper;
    [CeloContract.BlockchainParameters]?: BlockchainParametersWrapper;
    [CeloContract.DoubleSigningSlasher]?: DoubleSigningSlasherWrapper;
    [CeloContract.DowntimeSlasher]?: DowntimeSlasherWrapper;
    [CeloContract.Election]?: ElectionWrapper;
    [CeloContract.EpochRewards]?: EpochRewardsWrapper;
    [CeloContract.ERC20]?: Erc20Wrapper<Ierc20>;
    [CeloContract.Escrow]?: EscrowWrapper;
    [CeloContract.Exchange]?: ExchangeWrapper;
    [CeloContract.ExchangeEUR]?: ExchangeWrapper;
    [CeloContract.ExchangeBRL]?: ExchangeWrapper;
    [CeloContract.Freezer]?: FreezerWrapper;
    [CeloContract.GasPriceMinimum]?: GasPriceMinimumWrapper;
    [CeloContract.GoldToken]?: GoldTokenWrapper;
    [CeloContract.Governance]?: GovernanceWrapper;
    [CeloContract.GrandaMento]?: GrandaMentoWrapper;
    [CeloContract.LockedGold]?: LockedGoldWrapper;
    [CeloContract.MetaTransactionWallet]?: MetaTransactionWalletWrapper;
    [CeloContract.MetaTransactionWalletDeployer]?: MetaTransactionWalletDeployerWrapper;
    [CeloContract.MultiSig]?: MultiSigWrapper;
    [CeloContract.Reserve]?: ReserveWrapper;
    [CeloContract.SortedOracles]?: SortedOraclesWrapper;
    [CeloContract.StableToken]?: StableTokenWrapper;
    [CeloContract.StableTokenEUR]?: StableTokenWrapper;
    [CeloContract.StableTokenBRL]?: StableTokenWrapper;
    [CeloContract.Validators]?: ValidatorsWrapper;
}
/**
 * Kit ContractWrappers factory & cache.
 *
 * Provides access to all contract wrappers for celo core contracts
 */
export declare class WrapperCache {
    readonly kit: ContractKit;
    private wrapperCache;
    constructor(kit: ContractKit);
    getAccounts(): Promise<AccountsWrapper>;
    getAttestations(): Promise<AttestationsWrapper>;
    getBlockchainParameters(): Promise<BlockchainParametersWrapper>;
    getDoubleSigningSlasher(): Promise<DoubleSigningSlasherWrapper>;
    getDowntimeSlasher(): Promise<DowntimeSlasherWrapper>;
    getElection(): Promise<ElectionWrapper>;
    getEpochRewards(): Promise<EpochRewardsWrapper>;
    getErc20(address: string): Promise<Erc20Wrapper<Ierc20>>;
    getEscrow(): Promise<EscrowWrapper>;
    getExchange(stableToken?: StableToken): Promise<ExchangeWrapper>;
    getFreezer(): Promise<FreezerWrapper>;
    getGasPriceMinimum(): Promise<GasPriceMinimumWrapper>;
    getGoldToken(): Promise<GoldTokenWrapper>;
    getGovernance(): Promise<GovernanceWrapper>;
    getGrandaMento(): Promise<GrandaMentoWrapper>;
    getLockedGold(): Promise<LockedGoldWrapper>;
    getMetaTransactionWallet(address: string): Promise<MetaTransactionWalletWrapper>;
    getMetaTransactionWalletDeployer(address: string): Promise<MetaTransactionWalletDeployerWrapper>;
    getMultiSig(address: string): Promise<MultiSigWrapper>;
    getReserve(): Promise<ReserveWrapper>;
    getSortedOracles(): Promise<SortedOraclesWrapper>;
    getStableToken(stableToken?: StableToken): Promise<StableTokenWrapper>;
    getValidators(): Promise<ValidatorsWrapper>;
    /**
     * Get Contract wrapper
     */
    getContract<C extends ValidWrappers>(contract: C, address?: string): Promise<NonNullable<WrapperCacheMap[C]>>;
    invalidateContract<C extends ValidWrappers>(contract: C): void;
}
export {};
