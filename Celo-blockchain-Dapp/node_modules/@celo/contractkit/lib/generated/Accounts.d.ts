/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface Accounts extends Contract {
    clone(): Accounts;
    methods: {
        EIP712_AUTHORIZE_SIGNER_TYPEHASH(): CeloTxObject<string>;
        authorizedBy(arg0: string): CeloTxObject<string>;
        eip712DomainSeparator(): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        offchainStorageRoots(arg0: string, arg1: number | string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        initialize(registryAddress: string): CeloTxObject<void>;
        setEip712DomainSeparator(): CeloTxObject<void>;
        setAccount(name: string, dataEncryptionKey: string | number[], walletAddress: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        createAccount(): CeloTxObject<boolean>;
        setName(name: string): CeloTxObject<void>;
        setWalletAddress(walletAddress: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        setAccountDataEncryptionKey(dataEncryptionKey: string | number[]): CeloTxObject<void>;
        setMetadataURL(metadataURL: string): CeloTxObject<void>;
        addStorageRoot(url: string | number[]): CeloTxObject<void>;
        removeStorageRoot(index: number | string): CeloTxObject<void>;
        getOffchainStorageRoots(account: string): CeloTxObject<{
            0: string;
            1: string[];
        }>;
        setPaymentDelegation(beneficiary: string, fraction: number | string): CeloTxObject<void>;
        getPaymentDelegation(account: string): CeloTxObject<{
            0: string;
            1: string;
        }>;
        setIndexedSigner(signer: string, role: string | number[]): CeloTxObject<void>;
        authorizeSignerWithSignature(signer: string, role: string | number[], v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeVoteSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeValidatorSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeValidatorSignerWithPublicKey(signer: string, v: number | string, r: string | number[], s: string | number[], ecdsaPublicKey: string | number[]): CeloTxObject<void>;
        authorizeValidatorSignerWithKeys(signer: string, v: number | string, r: string | number[], s: string | number[], ecdsaPublicKey: string | number[], blsPublicKey: string | number[], blsPop: string | number[]): CeloTxObject<void>;
        authorizeAttestationSigner(signer: string, v: number | string, r: string | number[], s: string | number[]): CeloTxObject<void>;
        authorizeSigner(signer: string, role: string | number[]): CeloTxObject<void>;
        completeSignerAuthorization(account: string, role: string | number[]): CeloTxObject<void>;
        isLegacySigner(_account: string, signer: string, role: string | number[]): CeloTxObject<boolean>;
        isDefaultSigner(account: string, signer: string, role: string | number[]): CeloTxObject<boolean>;
        isIndexedSigner(account: string, signer: string, role: string | number[]): CeloTxObject<boolean>;
        isSigner(account: string, signer: string, role: string | number[]): CeloTxObject<boolean>;
        removeDefaultSigner(role: string | number[]): CeloTxObject<void>;
        removeIndexedSigner(role: string | number[]): CeloTxObject<void>;
        removeSigner(signer: string, role: string | number[]): CeloTxObject<void>;
        removeVoteSigner(): CeloTxObject<void>;
        removeValidatorSigner(): CeloTxObject<void>;
        removeAttestationSigner(): CeloTxObject<void>;
        attestationSignerToAccount(signer: string): CeloTxObject<string>;
        validatorSignerToAccount(signer: string): CeloTxObject<string>;
        voteSignerToAccount(signer: string): CeloTxObject<string>;
        signerToAccount(signer: string): CeloTxObject<string>;
        isLegacyRole(role: string | number[]): CeloTxObject<boolean>;
        getLegacySigner(_account: string, role: string | number[]): CeloTxObject<string>;
        getDefaultSigner(account: string, role: string | number[]): CeloTxObject<string>;
        getIndexedSigner(account: string, role: string | number[]): CeloTxObject<string>;
        getVoteSigner(account: string): CeloTxObject<string>;
        getValidatorSigner(account: string): CeloTxObject<string>;
        getAttestationSigner(account: string): CeloTxObject<string>;
        hasLegacySigner(account: string, role: string | number[]): CeloTxObject<boolean>;
        hasDefaultSigner(account: string, role: string | number[]): CeloTxObject<boolean>;
        hasIndexedSigner(account: string, role: string | number[]): CeloTxObject<boolean>;
        hasAuthorizedSigner(account: string, role: string): CeloTxObject<boolean>;
        hasAuthorizedVoteSigner(account: string): CeloTxObject<boolean>;
        hasAuthorizedValidatorSigner(account: string): CeloTxObject<boolean>;
        hasAuthorizedAttestationSigner(account: string): CeloTxObject<boolean>;
        getName(account: string): CeloTxObject<string>;
        getMetadataURL(account: string): CeloTxObject<string>;
        batchGetMetadataURL(accountsToQuery: string[]): CeloTxObject<{
            0: string[];
            1: string;
        }>;
        getDataEncryptionKey(account: string): CeloTxObject<string>;
        getWalletAddress(account: string): CeloTxObject<string>;
        isAccount(account: string): CeloTxObject<boolean>;
        isAuthorizedSigner(signer: string): CeloTxObject<boolean>;
        getRoleAuthorizationSigner(account: string, signer: string, role: string | number[], v: number | string, r: string | number[], s: string | number[]): CeloTxObject<string>;
    };
    events: {
        AccountCreated: ContractEvent<string>;
        AccountDataEncryptionKeySet: ContractEvent<{
            account: string;
            dataEncryptionKey: string;
            0: string;
            1: string;
        }>;
        AccountMetadataURLSet: ContractEvent<{
            account: string;
            metadataURL: string;
            0: string;
            1: string;
        }>;
        AccountNameSet: ContractEvent<{
            account: string;
            name: string;
            0: string;
            1: string;
        }>;
        AccountWalletAddressSet: ContractEvent<{
            account: string;
            walletAddress: string;
            0: string;
            1: string;
        }>;
        AttestationSignerAuthorized: ContractEvent<{
            account: string;
            signer: string;
            0: string;
            1: string;
        }>;
        AttestationSignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            0: string;
            1: string;
        }>;
        DefaultSignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        DefaultSignerSet: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        IndexedSignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        IndexedSignerSet: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        LegacySignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        LegacySignerSet: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        OffchainStorageRootAdded: ContractEvent<{
            account: string;
            url: string;
            0: string;
            1: string;
        }>;
        OffchainStorageRootRemoved: ContractEvent<{
            account: string;
            url: string;
            index: string;
            0: string;
            1: string;
            2: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        PaymentDelegationSet: ContractEvent<{
            beneficiary: string;
            fraction: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        SignerAuthorizationCompleted: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        SignerAuthorizationStarted: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        SignerAuthorized: ContractEvent<{
            account: string;
            signer: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        SignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            role: string;
            0: string;
            1: string;
            2: string;
        }>;
        ValidatorSignerAuthorized: ContractEvent<{
            account: string;
            signer: string;
            0: string;
            1: string;
        }>;
        ValidatorSignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            0: string;
            1: string;
        }>;
        VoteSignerAuthorized: ContractEvent<{
            account: string;
            signer: string;
            0: string;
            1: string;
        }>;
        VoteSignerRemoved: ContractEvent<{
            account: string;
            oldSigner: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newAccounts(web3: Web3, address: string): Accounts;
